@model CScheduler.Classes.Database.SmartJob
@using GridMvc.Html

@{
    ViewBag.Title = "Edit task";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>

<div class="row">
    <div class="col-md-6">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="">
                @if(Model.ID <= 0)
                {
                    <h4>New task</h4>
                }
                else
                {
                    <h4>Edit task</h4>
                }                
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @Html.HiddenFor(model => model.ID)

                <div class="row">
                    <div class="col-md-8">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                            <div class="">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group" style="margin-top: 23px;">
                            <div class="">
                                <div class="custom-control custom-switch">
                                    @Html.CheckBoxFor(model => model.IsActive, new { @class = "custom-control-input" })
                                    <label class="custom-control-label" for="IsActive">@Html.LabelFor(model => model.IsActive)</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CreditsNet, htmlAttributes: new { @class = "control-label" })
                            <div class="">
                                <div class="checkbox">
                                    @Html.DropDownListFor(model => model.CreditsNet.ID, Model.CreditsNetList, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.CreditsNet, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Method, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.Method, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Method, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" id="button-addon2">Deploy new</button>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ExecutionMode, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.RadioButtonFor(s => s.ExecutionMode, CScheduler.Classes.Database.SmartJob.ExecutionModeEnum.Regular)@Html.Label("Regular", new { @class = "radio-label" })
                        @Html.RadioButtonFor(s => s.ExecutionMode, CScheduler.Classes.Database.SmartJob.ExecutionModeEnum.Once)@Html.Label("Once", new { @class = "radio-label" })
                        @Html.RadioButtonFor(s => s.ExecutionMode, CScheduler.Classes.Database.SmartJob.ExecutionModeEnum.CronExpression)@Html.Label("Cron expression", new { @class = "radio-label" })
                    </div>
                </div>
                               
                <div class="form-group">
                    <div class="">
                        <div id="execution-mode-block-regular" style="display: none">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Rule.RegularDateFrom, htmlAttributes: new { @class = "control-label" })
                                        <div class="">
                                            @Html.EditorFor(model => model.Rule.RegularDateFrom, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "mm/dd/yyyy hh:mm:ss" } })
                                            @Html.ValidationMessageFor(model => model.Rule.RegularDateFrom, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Rule.RegularDateTo, htmlAttributes: new { @class = "control-label" })
                                        <div class="">
                                            @Html.EditorFor(model => model.Rule.RegularDateTo, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "mm/dd/yyyy hh:mm:ss" } })
                                            @Html.ValidationMessageFor(model => model.Rule.RegularDateTo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Rule.RegularValue, htmlAttributes: new { @class = "control-label" })
                                        <div class="">
                                            @Html.EditorFor(model => model.Rule.RegularValue, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Rule.RegularValue, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="">&nbsp;</label>
                                        <div class="">
                                            @Html.DropDownListFor(model => model.Rule.RegularPeriod, Model.RegularPeriodList, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Rule.RegularPeriod, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="execution-mode-block-once" style="display: none">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Rule.OnceDate, htmlAttributes: new { @class = "control-label" })
                                        <div class="">
                                            @Html.EditorFor(model => model.Rule.OnceDate, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "mm/dd/yyyy hh:mm:ss" } })
                                            @Html.ValidationMessageFor(model => model.Rule.OnceDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="execution-mode-block-cronexpression" style="display: none">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Rule.CronExpression, htmlAttributes: new { @class = "control-label" })
                                        <div class="">
                                            @Html.EditorFor(model => model.Rule.CronExpression, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Rule.CronExpression, "", new { @class = "text-danger" })
                                        </div>
                                        Use <a href="https://www.freeformatter.com/cron-expression-generator-quartz.html" target="_blank">online service</a> to generate cron expression
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3">
                        <a class="btn btn-light" href="/Home/Index" data-toggle="tooltip" data-placement="top" title="Back to list"><i class="fas fa-arrow-alt-circle-left"></i> Back</a>
                    </div>
                    <div class="col-md-9 save-btn-div">
                        <a class="btn btn-light" href="/Home/Delete?id=@Model.ID" data-toggle="tooltip" data-placement="top" title="Delete task"><i class="fas fa-times"></i> Delete</a>
                        <a class="btn btn-light" href="/Home/Execute?id=@Model.ID" data-toggle="tooltip" data-placement="top" title="Execute task"><i class="fas fa-rocket"></i> Execute</a>
                        <button type="submit" class="btn btn-success"><i class="fas fa-save" data-toggle="tooltip" data-placement="top" title="Save task"></i> Save</button>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-md-6">
        <h4 style="margin-bottom: 15px;">Events</h4>
        @if (Model.Events != null)
        {
            @Html.Grid(Model.Events.OrderByDescending(x => x.ID).ToList()).Columns(Columns =>
            {
                Columns.Add(c => c.ID).Titled("#").Sortable(true).Filterable(true).SetWidth(30);
                Columns.Add(c => c.RequestDate).Titled("Date & time").Sortable(true).Filterable(true);
                //Columns.Add(c => c.ResponseDate).Titled("Время отклика").Sortable(true).Filterable(true);
                Columns.Add(c => c.Text).Titled("Result").Sortable(true).Filterable(true);
            }).WithPaging(10).Sortable(true)
        }
    </div>
</div>

<script>

    function updateRuleTypeBlock() {

        var executionMode = $('#ExecutionMode:checked').val();

        $('#execution-mode-block-regular').hide();
        $('#execution-mode-block-once').hide();
        $('#execution-mode-block-cronexpression').hide();


        if (executionMode == 'Regular') {
            $('#execution-mode-block-regular').show();
        } else if (executionMode == 'Once') {
            $('#execution-mode-block-once').show();
        } else if (executionMode == 'CronExpression') {
            $('#execution-mode-block-cronexpression').show();
        }
    }

    $('input:radio').change(function () {
        updateRuleTypeBlock();
    });

    $(document).ready(function () {

        $(".datepicker").datetimepicker({
            format: 'mm/dd/yyyy hh:ii:ss',
            autoclose: true,
            todayBtn: true,
            pickerPosition: "bottom-left",
            minuteStep: 1
        });

        updateRuleTypeBlock();

        $('[data-toggle="tooltip"]').tooltip();
    });

</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
